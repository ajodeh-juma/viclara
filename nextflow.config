/*
 * -------------------------------------------------
 *  viclara Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs

params {

  // Workflow flags

  // input output options
  input                       = null
  metadata                    = null
  input_paths                 = null
  single_end                  = false
  outdir                      = './results'
  publish_dir_mode            = 'copy'
  
  // genomes
  segment                     = ''
  filter_phix                 = false
  host_fasta                  = ''
  host_bwa_index              = ''
  host_bowtie2_index          = ''
  save_reference              = false

  // Read trimming options
  trimmer                     = 'fastp'
  adapters                    = false
  illumina_clip               = '2:30:10'
  window_size                 = 4
  window_quality              = 20
  leading                     = 3
  trailing                    = 3
  average_quality             = 20
  min_length                  = 20
  qualified_quality_phred     = 30
  unqualified_percent_limit   = 10
  save_trimmed                = false
  save_trimmed_fail           = false
  skip_trimming               = false

  // Alignment options
  skip_alignment             = false
  save_unaligned             = false
  aligner                    = 'bwa'
  min_mapped                 = 200
  save_align_intermeds       = false
  skip_markduplicates        = false
  skip_alignment             = false


  // QC
  skip_qc                     = false
  skip_multiqc                = false

  // Variant calling options
  variant_caller              = 'bcftools'
  save_mpileup                = false
  mpileup_depth               = 0
  min_base_quality            = 20
  min_coverage                = 10
  min_allele_freq             = '0.25'
  max_allele_freq             = '0.75'
  varscan_strand_filter       = true
  p_value                     = 0.99
  min_read2                   = 5 

  // Denovo assembly options
  skip_assembly               = false
  assembler                   = 'tadpole'
  kmer_size                   = 'auto'

  // classification options
  database                    = ''
  skip_kraken2                = false

  // Boilerplate options
  enable_conda               = false
  multiqc_title              = ''
  multiqc_config             = false
  email                      = false
  email_on_fail              = false
  max_multiqc_email_size     = 25.MB
  plaintext_email            = false
  monochrome_logs            = false
  help                       = false

  params.igenomes_base       = "$baseDir/igenomes"
  tracedir                   = "${params.outdir}/pipeline_info"
  igenomes_ignore            = false
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames                  = false
  config_profile_description = false
  config_profile_contact     = false
  config_profile_url         = false
  validate_params            = true
  show_hidden_params         = false
  schema_ignore_params       = 'genomes,input_paths'

  // Defaults only, expecting to be overwritten
  max_memory                 = 8.GB
  max_cpus                   = 16
  max_time                   = 240.h
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/viclara:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda {
    docker.enabled = false
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud = false
    process.conda = "$projectDir/environment.yml"
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    docker.enabled = false
    singularity.enabled = true
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    singularity.autoMounts = true
  }
  podman {
    singularity.enabled = false
    docker.enabled = false
    podman.enabled = true
    shifter.enabled = false
    charliecloud = false
  }
  shifter {
    singularity.enabled = false
    docker.enabled = false
    podman.enabled = false
    shifter.enabled = true
    charliecloud.enabled = false
  }
  charliecloud {
    singularity.enabled = false
    docker.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = true
  }
  test { includeConfig 'conf/test.config' }
  test_full { includeConfig 'conf/test_full.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/viclara'
  author = '@ajodeh-juma'
  homePage = 'https://github.com/nf-core/viclara'
  description = 'virus classification and whole genome assembly of segmented viruses from metagenomics data'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}