/*
 * --------------------------------------------------
 *  Config file for defining DSL2 per module options
 * --------------------------------------------------
 *
 *   Available keys to override module options:
 *       args           = Additional arguments appended to command in module.
 *       args2          = Second set of arguments appended to command in module (multi-tool modules).
 *       publish_dir    = Directory to publish results.
 *       publish_by_id  = Publish results in separate folders by meta.id value.
 *       publish_files  = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
 *                        The value of "directory" is appended to the standard "publish_dir" path as defined above.
 *                        If publish_files == null (unspecified)  - All files are published.
 *                        If publish_files == false               - No files are published.
 *       suffix         = File name suffix for output files.
 * publish_files = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
 *
 */

params {
    modules {
        'fastqc' {
            args          = "--quiet"
        }
        'raw_counts' {
            publish_dir   = "fastqc"
        }
        'trimmed_counts' {
            publish_dir   = "${params.trimmer}"
        }
        'alignment_stats' {
            publish_dir   = "${params.aligner}"
        }
        'summary_stats' {
            publish_dir   = "summary"
        }
        'merge_raw_counts' {
            args          = "--ftype raw"
            publish_dir   = "fastqc"
        }
        'merge_trimmed_counts' {
            args          = "--ftype trimmed"
            publish_dir   = "${params.trimmer}"
        }
        'merge_mapped_counts' {
            args          = "--ftype mapped"
            publish_dir   = "${params.aligner}"
        }
        'fastp' {
            args          = "--cut_front --cut_tail --trim_poly_x --cut_mean_quality ${params.average_quality} --qualified_quality_phred ${params.qualified_quality_phred} --unqualified_percent_limit ${params.unqualified_percent_limit} --length_required ${params.min_length}"
        }
        'multiqc' {
            args          = ""
            publish_dir   = "multiqc/${params.aligner}"
        }
        'bwa_index' {
            args          = ""
            publish_dir   = "genome/index"
        }
        'bwa_mem' {
            args          = ""
            publish_dir   = "${params.aligner}"
        }
         'bowtie2_build' {
            args          = ""
            publish_dir   = "genome/index"
        }
        'bowtie2_align' {
            args          = ""
            publish_dir   = "${params.aligner}"
        }
        'samtools_sort' {
            suffix        = ".sorted"
            publish_dir   = "${params.aligner}"
        }
        'samtools_sort_phix' {
            suffix        = ".sorted"
            publish_dir   = "${params.aligner}/phix"
        }
        'samtools_sort_host' {
            suffix        = ".sorted"
            publish_dir   = "${params.aligner}/host"
        }
        'samtools_sort_reference' {
            suffix        = ".sorted"
            publish_dir   = "${params.aligner}/reference"
        }
        'align_bwa' {
            suffix        = ".sorted"
            publish_dir   = "${params.aligner}/phix"
        }
        'samtools_unmapped_fastq' {
            suffix        = ".unmapped"
        }
        'samtools_unmapped_fastq_phix' {
            suffix        = ".unmapped"
            publish_dir   = "${params.aligner}/phix"
        }
        'samtools_unmapped_fastq_host' {
            suffix        = ".unmapped"
            publish_dir   = "${params.aligner}/host"
        }
        'samtools_mapped_bam' {
            suffix        = ".mapped"
            publish_dir   = "${params.aligner}/mapped"
        }
        'picard_markduplicates' {
            suffix        = '.mkdup'
            args          = "ASSUME_SORTED=true TMP_DIR=tmp"
            publish_dir   = "picard/markduplicates"
        }
        'picard_markduplicates_samtools' {
            suffix        = '.sorted'
            publish_dir   = "picard/markduplicates"
        }
        'bedtools_genomecov' {
            publish_dir   = 'bedtools/coverage/genome'
        }
        'plots' {
            publish_dir   = 'plots'
        }
        'bcftools_mpileup' {
            args           = "--count-orphans --no-BAQ --max-depth ${params.mpileup_depth} --min-BQ ${params.min_base_quality} --annotate FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SP,INFO/AD,INFO/ADF,INFO/ADR"
            args2          = "--ploidy 1 --keep-alts --keep-masked-ref --multiallelic-caller --variants-only"
            args3          = "--include 'INFO/DP>=${params.min_coverage}'"
            publish_dir    = "${params.variant_caller}/mpileup"
        }
        'bcftools_consensus' {
            publish_dir    = "${params.variant_caller}/consensus"
        }
        'samtools_mpileup' {
            args           = "--count-orphans --no-BAQ --max-depth ${params.mpileup_depth} --min-BQ ${params.min_base_quality}"
        }
        'varscan_mpileup' {
            args           = "--min-coverage ${params.min_coverage} --min-reads2 ${params.min_read2} --min-avg-qual ${params.min_base_quality} --min-var-freq ${params.min_allele_freq} --p-value ${params.p_value}"
            args2          = "-i 'FORMAT/AD / (FORMAT/AD + FORMAT/RD) >= $params.max_allele_freq'"
            publish_dir    = "${params.variant_caller}/mpileup"
        }
        'varscan_consensus' {
            publish_dir    = "${params.variant_caller}/consensus"
        }
        'snpeff_annotate' {
            publish_dir    = "${params.variant_caller}"
        }
        'metaspades_assemble' {
            args           = "-k ${params.kmer_size}"
        }
        'abacas_contiguate' {
            args           = "-p nucmer"
        }
        'consensus_qc' {
            publish_dir    = 'summary'
        }
    }
}